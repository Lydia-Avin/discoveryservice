name: CICD Pipeline

on:
  push:
    branches:
      - main

jobs:
  build-and-push-ecr:
    runs-on: ubuntu-latest
    name: Build and Push Docker Images to ECR
    env:
      ENV: "DEV"
      AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
      AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ secrets.AWS_REGION_NAME }}

      - name: Log in to Amazon ECR
        id: login-ecr
        uses: aws-actions/amazon-ecr-login@v2

      - name: Build Docker image
        run: |
          TAG=$(echo ${{ github.sha }} | head -c8)
          AWS_ACCOUNT_ID="${{ secrets.AWS_ACCOUNT_ID }}"
          AWS_REGION_NAME="${{ secrets.AWS_REGION_NAME }}"
          IMAGE_NAME="${AWS_ACCOUNT_ID}.dkr.ecr.${AWS_REGION_NAME}.amazonaws.com/${{ secrets.ECR_REPOSITORY_NAME }}:${TAG}"
          
          echo "AWS_ACCOUNT_ID is $AWS_ACCOUNT_ID"
          echo "AWS_REGION_NAME is $AWS_REGION_NAME"
          echo "IMAGE_NAME is $IMAGE_NAME"
          
          docker build --build-arg EC2_USER=$EC2_USER -t $IMAGE_NAME .

          echo "::set-output name=image::$IMAGE_NAME" 
        id: docker_build

      - name: Push Docker image to ECR
        run: |
          docker push ${{ steps.docker_build.outputs.image }}

  deploy-to-ec2:
    runs-on: ubuntu-latest
    name: Deploy and Run Docker Images on EC2
    needs: build-and-push-ecr

    steps:
      - name: SSH into EC2 and deploy containers using Docker Compose
        uses: appleboy/ssh-action@v1.0.3
        with:
          host: ${{ secrets.EC2_HOST }}
          username: ${{ secrets.EC2_USER }}
          key: ${{ secrets.EC2_SSH_KEY }}
          script: |
            echo "ENV=DEV" > .env
            echo "AWS_ACCESS_KEY_ID=${{ secrets.AWS_ACCESS_KEY_ID }}" >> .env
            echo "AWS_SECRET_ACCESS_KEY=${{ secrets.AWS_SECRET_ACCESS_KEY }}" >> .env
            
            sudo systemctl stop nginx || echo "nginx not installed or running"

            if ! command -v docker &> /dev/null
            then
                sudo yum update -y
                sudo yum install -y docker
                sudo systemctl start docker
                sudo systemctl enable docker
            fi

            if ! command -v docker-compose &> /dev/null
            then
                sudo curl -L "https://github.com/docker/compose/releases/download/1.29.2/docker-compose-$(uname -s)-$(uname -m)" -o /usr/local/bin/docker-compose
                sudo chmod +x /usr/local/bin/docker-compose
            fi

            aws ecr get-login-password --region ${{ secrets.AWS_REGION_NAME }} | sudo docker login --username AWS --password-stdin ${{ secrets.AWS_ACCOUNT_ID }}.dkr.ecr.${{ secrets.AWS_REGION_NAME }}.amazonaws.com

            sudo docker container prune -f
            sudo docker image prune -a -f
            sudo docker volume prune -f
            sudo docker network prune -f

            TAG=$(echo ${{ github.sha }} | head -c8)
            IMAGE_NAME=${{ secrets.AWS_ACCOUNT_ID }}.dkr.ecr.${{ secrets.AWS_REGION_NAME }}.amazonaws.com/${{ secrets.ECR_REPOSITORY_NAME }}:$TAG
            
            echo "Using IMAGE_NAME: $IMAGE_NAME"

            docker stop discoveryservice || true
            docker rm discoveryservice || true

            sudo docker pull $IMAGE_NAME

            export IMAGE_NAME=$IMAGE_NAME

            cd ./discoveryservice
            env_file=.env
            docker-compose down || true
            IMAGE_NAME=$IMAGE_NAME docker-compose up -d --force-recreate --remove-orphans

            echo "Flask app container started successfully on port 8000"
            exit 0
